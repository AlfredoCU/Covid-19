{"version":3,"sources":["components/InfoGlobal.js","components/SearchCountryInfo.js","components/SearchInfo.js","components/CountryInfo.js","App.js","serviceWorker.js","index.js"],"names":["InfoGlobal","date","NewConfirmed","TotalConfirmed","NewDeaths","TotalDeaths","NewRecovered","TotalRecovered","moment","locale","Card","className","CardHeader","title","subheader","format","List","ListItem","ListItemAvatar","Avatar","ListItemText","primary","secondary","SearchCountryInfo","Countries","Country","SearchInfo","state","filterText","onFilterTextChange","setState","handleFilterTextChange","e","target","value","handleKeyPress","key","preventDefault","rows","this","props","noValidate","type","list","placeholder","onKeyPress","onChange","id","map","item","indexOf","push","length","Component","CountryInfo","useState","page","setPage","rowsPerPage","setRowsPerPage","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","slice","TablePagination","labelRowsPerPage","rowsPerPageOptions","component","count","onChangePage","event","newPage","onChangeRowsPerPage","App","data","stateData","dataApi","getData","a","fetch","response","json","Grid","container","direction","justify","alignItems","Date","Global","params","particles","number","density","enable","value_area","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5fc87bfa.chunk.js","sourcesContent":["import React from \"react\";\nimport moment from \"moment\";\nimport \"moment/locale/es\";\nimport IconNewConfirmed from \"@material-ui/icons/AddAlert\";\nimport IconTotalConfirmed from \"@material-ui/icons/AirlineSeatFlat\";\nimport IconNewDeaths from \"@material-ui/icons/NewReleases\";\nimport IconTotalDeaths from \"@material-ui/icons/MoodBad\";\nimport IconNewRecovered from \"@material-ui/icons/AccessibilityNew\";\nimport IconTotalRecovered from \"@material-ui/icons/EmojiEmotions\";\nimport {\n  Card,\n  CardHeader,\n  List,\n  Avatar,\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n} from \"@material-ui/core\";\n\nconst InfoGlobal = ({\n  date,\n  NewConfirmed,\n  TotalConfirmed,\n  NewDeaths,\n  TotalDeaths,\n  NewRecovered,\n  TotalRecovered,\n}) => {\n  moment.locale(\"es\");\n\n  return (\n    <Card className=\"card\">\n      <CardHeader\n        title=\"InformaciÃ³n Global\"\n        subheader={moment(date).format(\"LLLL\")}\n      />\n      <div className=\"card-row\">\n        <List>\n          <ListItem>\n            <ListItemAvatar>\n              <Avatar className=\"avatar1\">\n                <IconNewConfirmed className=\"color1\" />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText\n              primary={NewConfirmed}\n              secondary=\"Nuevos confirmado\"\n            />\n          </ListItem>\n          <ListItem>\n            <ListItemAvatar>\n              <Avatar className=\"avatar1\">\n                <IconTotalConfirmed className=\"color1\" />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText\n              primary={TotalConfirmed}\n              secondary=\"Total confirmado\"\n            />\n          </ListItem>\n          <ListItem>\n            <ListItemAvatar>\n              <Avatar className=\"avatar2\">\n                <IconNewDeaths className=\"color2\" />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary={NewDeaths} secondary=\"Nuevas muertes\" />\n          </ListItem>\n        </List>\n\n        <List>\n          <ListItem>\n            <ListItemAvatar>\n              <Avatar className=\"avatar2\">\n                <IconTotalDeaths className=\"color2\" />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary={TotalDeaths} secondary=\"Muertes totales\" />\n          </ListItem>\n          <ListItem>\n            <ListItemAvatar>\n              <Avatar className=\"avatar3\">\n                <IconNewRecovered className=\"color3\" />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText\n              primary={NewRecovered}\n              secondary=\"Nuevos recuperado\"\n            />\n          </ListItem>\n          <ListItem>\n            <ListItemAvatar>\n              <Avatar className=\"avatar3\">\n                <IconTotalRecovered className=\"color3\" />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText\n              primary={TotalRecovered}\n              secondary=\"Total recuperado\"\n            />\n          </ListItem>\n        </List>\n      </div>\n    </Card>\n  );\n};\n\nexport default InfoGlobal;\n","import React from \"react\";\nimport IconNewConfirmed from \"@material-ui/icons/AddAlert\";\nimport IconTotalConfirmed from \"@material-ui/icons/AirlineSeatFlat\";\nimport IconNewDeaths from \"@material-ui/icons/NewReleases\";\nimport IconTotalDeaths from \"@material-ui/icons/MoodBad\";\nimport IconNewRecovered from \"@material-ui/icons/AccessibilityNew\";\nimport IconTotalRecovered from \"@material-ui/icons/EmojiEmotions\";\nimport {\n  List,\n  Avatar,\n  ListItemAvatar,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\n\nconst SearchCountryInfo = ({ Countries }) => {\n  return (\n    <>\n      <h2>PaÃ­s: {Countries.Country}</h2>\n      <div className=\"card-row\">\n        <List>\n          <ListItem>\n            <ListItemAvatar>\n              <Avatar className=\"avatar1\">\n                <IconNewConfirmed className=\"color1\" />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText\n              primary={Countries.NewConfirmed}\n              secondary=\"Nuevos confirmado:\"\n            />\n          </ListItem>\n          <ListItem>\n            <ListItemAvatar>\n              <Avatar className=\"avatar1\">\n                <IconTotalConfirmed className=\"color1\" />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText\n              primary={Countries.TotalConfirmed}\n              secondary=\"Total confirmado:\"\n            />\n          </ListItem>\n          <ListItem>\n            <ListItemAvatar>\n              <Avatar className=\"avatar2\">\n                <IconNewDeaths className=\"color2\" />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText\n              primary={Countries.NewDeaths}\n              secondary=\"Nuevas muertes:\"\n            />\n          </ListItem>\n        </List>\n\n        <List>\n          <ListItem>\n            <ListItemAvatar>\n              <Avatar className=\"avatar2\">\n                <IconTotalDeaths className=\"color2\" />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText\n              primary={Countries.TotalDeaths}\n              secondary=\"Muertes totales:\"\n            />\n          </ListItem>\n          <ListItem>\n            <ListItemAvatar>\n              <Avatar className=\"avatar3\">\n                <IconNewRecovered className=\"color3\" />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText\n              primary={Countries.NewRecovered}\n              secondary=\"Nuevos recuperado:\"\n            />\n          </ListItem>\n          <ListItem>\n            <ListItemAvatar>\n              <Avatar className=\"avatar3\">\n                <IconTotalRecovered className=\"color3\" />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText\n              primary={Countries.TotalRecovered}\n              secondary=\"Total recuperado:\"\n            />\n          </ListItem>\n        </List>\n      </div>\n    </>\n  );\n};\n\nexport default SearchCountryInfo;\n","import React, { Component } from \"react\";\nimport SearchCountryInfo from \"./SearchCountryInfo\";\nimport { Card, CardHeader } from \"@material-ui/core\";\n\nclass SearchInfo extends Component {\n  state = {\n    filterText: \"\",\n  };\n\n  onFilterTextChange = (filterText) => {\n    this.setState({ filterText: filterText });\n  };\n\n  handleFilterTextChange = (e) => {\n    this.onFilterTextChange(e.target.value);\n  };\n\n  handleKeyPress = (e) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n    }\n  };\n\n  render() {\n    const rows = [];\n    const { filterText } = this.state;\n    const Countries = this.props.Countries;\n\n    return (\n      <Card className=\"card card-form\">\n        <CardHeader\n          title=\"Buscar InformaciÃ³n por paÃ­s\"\n          subheader=\"Seleccione un paÃ­s del que desee conocer confirmados, muertes y recuperados\"\n        />\n        <div className=\"space\">\n          <form noValidate>\n            <input\n              type=\"text\"\n              list=\"data\"\n              placeholder=\"Buscar paÃ­s...\"\n              value={filterText}\n              onKeyPress={this.handleKeyPress}\n              onChange={this.handleFilterTextChange}\n            />\n            <datalist id=\"data\">\n              {Countries &&\n                Countries.map((item, key) => (\n                  <option key={key} value={item.Country} />\n                ))}\n            </datalist>\n          </form>\n          <div>\n            {Countries &&\n              Countries.map((item, key) => {\n                if (item.Country.indexOf(filterText) === -1) {\n                  return;\n                }\n                rows.push(<SearchCountryInfo key={key} Countries={item} />);\n              })}\n            <div>{rows.length > 2 ? \"Sin resultados...\" : rows}</div>\n          </div>\n        </div>\n      </Card>\n    );\n  }\n}\n\nexport default SearchInfo;\n","import React, { useState } from \"react\";\nimport {\n  Card,\n  TableContainer,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  TablePagination,\n} from \"@material-ui/core\";\n\nconst CountryInfo = ({ Countries }) => {\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return (\n    <Card className=\"card card-form-table\">\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>PaÃ­ses</TableCell>\n              <TableCell>Nuevos confirmado</TableCell>\n              <TableCell>Total confirmado</TableCell>\n              <TableCell>Nuevas muertes</TableCell>\n              <TableCell>Muertes totales</TableCell>\n              <TableCell>Nuevos recuperado</TableCell>\n              <TableCell>Total recuperado</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {Countries &&\n              Countries.slice(\n                page * rowsPerPage,\n                page * rowsPerPage + rowsPerPage\n              ).map((item, key) => {\n                return (\n                  <TableRow key={key}>\n                    <TableCell>{item.Country}</TableCell>\n                    <TableCell>{item.NewConfirmed}</TableCell>\n                    <TableCell>{item.TotalConfirmed}</TableCell>\n                    <TableCell>{item.NewDeaths}</TableCell>\n                    <TableCell>{item.TotalDeaths}</TableCell>\n                    <TableCell>{item.NewRecovered}</TableCell>\n                    <TableCell>{item.TotalRecovered}</TableCell>\n                  </TableRow>\n                );\n              })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        labelRowsPerPage=\"PÃ¡ginas: \"\n        rowsPerPageOptions={[5, 10, 25, 50, 75, 100]}\n        component=\"div\"\n        count={Countries && Countries.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </Card>\n  );\n};\n\nexport default CountryInfo;\n","import React, { Component } from \"react\";\nimport InfoGlobal from \"./components/InfoGlobal\";\nimport SearchInfo from \"./components/SearchInfo\";\nimport CountryInfo from \"./components/CountryInfo\";\nimport Particles from \"react-particles-js\";\nimport { Grid } from \"@material-ui/core\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    data: [],\n  };\n\n  stateData = (dataApi) => {\n    this.setState({ data: dataApi });\n  };\n\n  getData = async () => {\n    let response = await fetch(\"https://api.covid19api.com/summary\");\n    let data = await response.json();\n    this.stateData(data);\n  };\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  render() {\n    const { data } = this.state;\n    const paramsParticles = {\n      particles: {\n        number: {\n          value: 100,\n          density: {\n            enable: true,\n            value_area: 1000,\n          },\n        },\n      },\n    };\n\n    return (\n      <>\n        <header className=\"app-header\">\n          <h1>COVID-19</h1>\n        </header>\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n          <InfoGlobal\n            date={data.Date}\n            NewConfirmed={data.Global && data.Global.NewConfirmed}\n            TotalConfirmed={data.Global && data.Global.TotalConfirmed}\n            NewDeaths={data.Global && data.Global.NewDeaths}\n            TotalDeaths={data.Global && data.Global.TotalDeaths}\n            NewRecovered={data.Global && data.Global.NewRecovered}\n            TotalRecovered={data.Global && data.Global.TotalRecovered}\n          />\n        </Grid>\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n          <SearchInfo Countries={data.Countries} />\n        </Grid>\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n          <CountryInfo Countries={data.Countries} />\n        </Grid>\n        <Particles className=\"particles\" params={paramsParticles} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}