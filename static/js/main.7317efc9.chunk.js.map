{"version":3,"sources":["components/InfoGlobal.js","App.js","serviceWorker.js","index.js"],"names":["InfoGlobal","date","NewConfirmed","TotalConfirmed","NewDeaths","TotalDeaths","NewRecovered","TotalRecovered","moment","locale","Card","className","CardHeader","title","subheader","format","List","ListItem","ListItemAvatar","Avatar","ListItemText","primary","secondary","App","state","data","stateData","dataApi","setState","getData","a","fetch","response","json","this","Grid","container","direction","justify","alignItems","Date","Global","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7317efc9.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Card,\n  CardHeader,\n  List,\n  Avatar,\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n} from \"@material-ui/core\";\nimport moment from \"moment\";\nimport \"moment/locale/es\";\nimport IconNewConfirmed from \"@material-ui/icons/AddAlert\";\nimport IconTotalConfirmed from \"@material-ui/icons/AirlineSeatFlat\";\nimport IconNewDeaths from \"@material-ui/icons/NewReleases\";\nimport IconTotalDeaths from \"@material-ui/icons/MoodBad\"; // SentimentVeryDissatisfied\nimport IconNewRecovered from \"@material-ui/icons/AccessibilityNew\";\nimport IconTotalRecovered from \"@material-ui/icons/EmojiEmotions\"; // TagFaces\n\nconst InfoGlobal = ({\n  date,\n  NewConfirmed,\n  TotalConfirmed,\n  NewDeaths,\n  TotalDeaths,\n  NewRecovered,\n  TotalRecovered,\n}) => {\n  moment.locale(\"es\");\n\n  return (\n    <Card className=\"card\">\n      <CardHeader\n        title=\"InformaciÃ³n Global\"\n        subheader={moment(date).format(\"LLLL\")}\n      />\n      <div className=\"card-row\">\n        <div>\n          <List>\n            <ListItem>\n              <ListItemAvatar>\n                <Avatar className=\"avatar1\">\n                  <IconNewConfirmed className=\"color1\" />\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                primary={NewConfirmed}\n                secondary=\"Nuevos confirmado\"\n              />\n            </ListItem>\n            <ListItem>\n              <ListItemAvatar>\n                <Avatar className=\"avatar1\">\n                  <IconTotalConfirmed className=\"color1\" />\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                primary={TotalConfirmed}\n                secondary=\"Total confirmado\"\n              />\n            </ListItem>\n            <ListItem>\n              <ListItemAvatar>\n                <Avatar className=\"avatar2\">\n                  <IconNewDeaths className=\"color2\" />\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText primary={NewDeaths} secondary=\"Nuevas muertes\" />\n            </ListItem>\n          </List>\n        </div>\n\n        <div>\n          <List>\n            <ListItem>\n              <ListItemAvatar>\n                <Avatar className=\"avatar2\">\n                  <IconTotalDeaths className=\"color2\" />\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText primary={TotalDeaths} secondary=\"Muertes totales\" />\n            </ListItem>\n            <ListItem>\n              <ListItemAvatar>\n                <Avatar className=\"avatar3\">\n                  <IconNewRecovered className=\"color3\" />\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                primary={NewRecovered}\n                secondary=\"Nuevos recuperado\"\n              />\n            </ListItem>\n            <ListItem>\n              <ListItemAvatar>\n                <Avatar className=\"avatar3\">\n                  <IconTotalRecovered className=\"color3\" />\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                primary={TotalRecovered}\n                secondary=\"Total recuperado\"\n              />\n            </ListItem>\n          </List>\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nexport default InfoGlobal;\n","import React, { Component } from \"react\";\nimport InfoGlobal from \"./components/InfoGlobal\";\nimport { Grid } from \"@material-ui/core\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    data: [],\n  };\n\n  stateData = (dataApi) => {\n    this.setState({ data: dataApi });\n  };\n\n  getData = async () => {\n    let response = await fetch(\"https://api.covid19api.com/summary\");\n    let data = await response.json();\n    this.stateData(data);\n  };\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  render() {\n    const { data } = this.state;\n    return (\n      <>\n        <header className=\"app-header\">\n          <h1>COVID-19</h1>\n        </header>\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n          <InfoGlobal\n            date={data.Date}\n            NewConfirmed={data.Global && data.Global.NewConfirmed}\n            TotalConfirmed={data.Global && data.Global.TotalConfirmed}\n            NewDeaths={data.Global && data.Global.NewDeaths}\n            TotalDeaths={data.Global && data.Global.TotalDeaths}\n            NewRecovered={data.Global && data.Global.NewRecovered}\n            TotalRecovered={data.Global && data.Global.TotalRecovered}\n          />\n        </Grid>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}